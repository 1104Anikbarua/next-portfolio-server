// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user model 
model User {
  id        String   @id @unique @default(uuid())
  name      String
  email     String   @unique
  password  String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Blog      Blog[]

  @@map("users")
}

// skill model 
model Skill {
  id          String   @id @default(uuid())
  expertise   String[]
  comfortable String[]
  familiar    String[]
  tools       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("skills")
}

// experience model 
model Experience {
  id          String   @id @default(uuid())
  companyName String
  position    String
  duration    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("experiences")
}

// education model 
model Education {
  id              String   @id @default(uuid())
  examType        String
  institutionName String
  passingYear     String
  cgpa            Float    @default(0.0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("educations")
}

// project model 
model Project {
  id               String   @id @default(uuid())
  projectName      String
  projectDuration  String?
  technologies     String
  liveSiteLink     String
  githubClientLink String?
  githubServerLink String?
  // category        String
  featureOne       String?
  featureTwo       String?
  featureThree     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("projects")
}

// blog model 
model Blog {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String
  content   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String

  @@map("blogs")
}
